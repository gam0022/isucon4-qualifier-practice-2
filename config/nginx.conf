user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log;
#error_log  /var/log/nginx/error.log  notice;
#error_log  /var/log/nginx/error.log  info;

worker_rlimit_nofile  4096;

pid        /var/run/nginx.pid;

events {
	worker_connections 8192;
	multi_accept on;
	use epoll;
}


http {
	include       /etc/nginx/mime.types;
	default_type  application/octet-stream;

	proxy_temp_path /dev/shm/nginx/temp;
	proxy_cache_path /dev/shm/nginx/cache  levels=2:2 keys_zone=zone:100m;
	proxy_cache zone;

	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
		'$status $body_bytes_sent "$http_referer" '
		'"$http_user_agent" "$http_x_forwarded_for"';

	# ログ解析に使う部分は LTSV ぽくしよう
	log_format  isucon '$time_local $msec\t$status\treqtime:$request_time\t'
		'in:$request_length\tout:$bytes_sent\trequest:$request\t'
		'acceptencoding:$http_accept_encoding\treferer:$http_referer\t'
		'ua:$http_user_agent';

	# 計測時は access_log off; で性能稼げる.
	access_log  /var/log/nginx/access.log  isucon;

	sendfile        on;
	#tcp_nopush     on;

	#keepalive_timeout  0;
	keepalive_timeout  120;

	#gzip  on;

	# Load modular configuration files from the /etc/nginx/conf.d directory.
	# See http://nginx.org/en/docs/ngx_core_module.html#include
	# for more information.
	#include /etc/nginx/conf.d/*.conf;

	upstream isucon {
		#server 127.0.0.1:8080;
		server unix:/tmp/go.sock;
		#keepalive 4;  # 頻繁にアプリサーバーへの再接続をして TIME_WAIT で死ぬのを防ぐ.
	}

	server {
		listen       80;
		server_name  localhost;
		
		# 静的ファイルがある場所を指定
		root         /home/isucon/webapp/public/;
		
		# 静的ファイルを正規表現でマッチさせて nginx に返させる
		location ~ ^/(stylesheets|images|html)/ {
			proxy_cache_key $host$request_uri;
			open_file_cache max=100;
		}
		
		location = / {
			proxy_cache_key $host$request_uri;

			if ($arg_err = 'locked') {
				rewrite ^ /html/index_locked.html last;
			}
			if ($arg_err = 'banned') {
				rewrite ^ /html/index_banned.html last;
			}
			if ($arg_err = 'wrong') {
				rewrite ^ /html/index_wrong.html last;
			}
			if ($arg_err = 'invalid') {
				rewrite ^ /html/index_invalid.html last;
			}
			rewrite ^ /html/index.html;
		}
		
		location / {
			# uwsgi にするときは uwsgi_pass;
			proxy_pass http://isucon;
			# デフォルトで HTTP ヘッダは転送されるけど、 Host は明示的に指定しないと転送されない
			proxy_set_header Host $host;

			# "session_key" という名前の Cookie があった場合はキャッシュを利用しない＋作らない.
			#set $no_cache 0;
			#if ($cookie_user_id) {
			#	set $no_cache 1;
			#}
			#proxy_no_cache $no_cache;
			#proxy_cache_bypass $no_cache;
			#proxy_cache_key $host$request_uri;
		}
	}
	
	# another virtual host using mix of IP-, name-, and port-based configuration
	#
	#server {
	#    listen       8000;
	#    listen       somename:8080;
	#    server_name  somename  alias  another.alias;
	#    root         html;
	#    location / {
	#    }
	#}
}
